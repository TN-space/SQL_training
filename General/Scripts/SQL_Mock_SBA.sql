use MockSQLSBA;

-- 1. Create a query to return all orders made by users with the first name of “Marion”.
-- SELECT * from ORDERS ;
-- SELECT * from USERS u ;
-- SELECT * from ORDER_ITEMS;
-- SELECT * from ITEMS i ;
SELECT u.FIRST_NAME, u.USER_ID, o.ORDER_ID, o.STORE_ID, i.NAME, oi.QUANTITY 
FROM ORDERS o
join USERS u  on o.USER_ID = u.USER_ID
join ORDER_ITEMS oi on o.ORDER_ID = oi.ORDER_ID 
join ITEMS i on oi.ITEM_ID = i.ITEM_ID 
WHERE u.FIRST_NAME = 'Marion'

-- 2. Create a query to select all users that have not made an order.
select * 
FROM USERS u 
left join ORDERS o on u.USER_ID = o.USER_ID 
where o.ORDER_ID is null;

-- 3. Create a Query to select the names and prices of all items that have been part of 2 or more separate orders.
-- items that have been part of 2 or more separate orders.
SELECT oi.ITEM_ID  , i.NAME, i.PRICE 
FROM ORDER_ITEMS oi
join ITEMS i on oi.ITEM_ID = i.ITEM_ID 
GROUP by i.ITEM_ID
HAVING count(DISTINCT oi.ORDER_ID) >= 2;

/*4. Create a query to return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York”. 
Order by Order Id in ascending order.*/
SELECT oi.ORDER_ID, i.NAME, i.PRICE, oi.QUANTITY 
FROM ORDER_ITEMS oi 
join ITEMS i on oi.ITEM_ID = i.ITEM_ID 
join ORDERS o on oi.ORDER_ID = o.ORDER_ID 
join STORES s on o.STORE_ID = s.STORE_ID 
WHERE s.CITY = 'New York'
ORDER by oi.ORDER_ID asc;

/*5. Your boss would like you to create a query that calculates the total revenue generated by each item. 
 *Revenue for an item can be found as (Item Price * Total Quantity Ordered). 
 *Please return the first column as ‘ITEM_NAME’ and the second column as ‘REVENUE’. */
SELECT i.NAME as `ITEM_NAME`, (sum(oi.QUANTITY) * i.PRICE) as `REVENUE` 
FROM ITEMS i 
join ORDER_ITEMS oi on i.ITEM_ID = oi.ITEM_ID 
GROUP by i.ITEM_ID 

/*6. Create a query with the following output: 
a. Column 1 - Store Name 
	i. The name of each store 
b. Column 2 - Order Quantity 
	i. The number of times an order has been made in this store 
c. Column 3 - Sales Figure 
	i. If the store has been involved in more than 3 orders, mark as ‘High’ 
	ii. If the store has been involved in less than 3 orders but more than 1 order, mark as ‘Medium’ 
	iii. If the store has been involved with 1 or less orders, mark as ‘Low’ 
d. Should be ordered by the Order Quantity in Descending Order.*/
SELECT count(DISTINCT o.ORDER_ID) as `Order Quantity`, o.ORDER_ID, o.STORE_ID,
case 
 	when count(DISTINCT o.ORDER_ID) >= 3 then 'High'
 	when count(DISTINCT o.ORDER_ID) > 1 and count(DISTINCT o.ORDER_ID) < 3 then 'Medium'
 	when count(DISTINCT o.ORDER_ID) <= 1 then 'Low'
 	else 'No sales'
end as `Sales Figure`
FROM ORDERS o 
join ORDER_ITEMS oi on o.ORDER_ID = oi.ORDER_ID 
GROUP by o.STORE_ID
ORDER by 1 desc;



